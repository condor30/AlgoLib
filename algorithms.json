{"algorithms": [{"name": "Quicksort (Tri rapide) :", "content": "function quicksort(list):\n    if length(list) <= 1:\n        return list\n    else:\n        pivot = choose_pivot(list)\n        less = [element for element in list if element < pivot]\n        equal = [element for element in list if element == pivot]\n        greater = [element for element in list if element > pivot]\n        return quicksort(less) + equal + quicksort(greater)\n"}, {"name": "Arbre de d\u00e9cision (pseudo-code) :", "content": "class DecisionNode:\n    def __init__(self, attribute, value, true_branch, false_branch):\n        self.attribute = attribute\n        self.value = value\n        self.true_branch = true_branch\n        self.false_branch = false_branch\n\ndef build_decision_tree(data):\n    # Logique de construction de l'arbre de d\u00e9cision bas\u00e9e sur les donn\u00e9es\n    # ...\n\n# Exemple d'utilisation d'un arbre de d\u00e9cision\ndata = load_data()\ndecision_tree = build_decision_tree(data)\nprediction = make_decision(decision_tree, new_data)\n"}]}